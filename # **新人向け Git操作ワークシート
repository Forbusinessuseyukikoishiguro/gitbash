了解です！
では、新人エンジニア向けに **Git操作ワークシート（チェックリスト形式）** を作りました。
これを使えば、**実際に Git Bash を打ちながら操作手順を確認でき、正常／異常時の対応も覚えられます**。

---

# **新人向け Git操作ワークシート**

## **1. 初期準備**

| 手順      | コマンド例                                              | 確認ポイント                                              | チェック |
| ------- | -------------------------------------------------- | --------------------------------------------------- | ---- |
| ユーザ名設定  | `git config --global user.name "Your Name"`        | 名前が設定されている                                          | ☐    |
| メール設定   | `git config --global user.email "you@example.com"` | メールが設定されている                                         | ☐    |
| SSH鍵作成  | `ssh-keygen -t ed25519 -C "you@example.com"`       | 公開鍵 ~/.ssh/id_ed25519.pub を GitHub に登録              | ☐    |
| SSH接続確認 | `ssh -T git@github.com`                            | "Hi username! You've successfully authenticated" 表示 | ☐    |

---

## **2. リポジトリ操作**

| 手順       | コマンド例                                        | 確認ポイント                | チェック |
| -------- | -------------------------------------------- | --------------------- | ---- |
| クローン     | `git clone git@github.com:username/repo.git` | ローカルに repo フォルダが作成される | ☐    |
| ブランチ確認   | `git branch -a`                              | ローカル・リモートブランチ一覧表示     | ☐    |
| ブランチ切替   | `git checkout develop`                       | develop に移動           | ☐    |
| 新規ブランチ作成 | `git checkout -b feature/xxx`                | feature/xxx ブランチ作成    | ☐    |

---

## **3. 変更作業・コミット**

| 手順     | コマンド例                    | 確認ポイント                                    | チェック |
| ------ | ------------------------ | ----------------------------------------- | ---- |
| 変更内容確認 | `git status`             | 変更したファイルが表示される                            | ☐    |
| ステージング | `git add file.py`        | git status に "Changes to be committed" 表示 | ☐    |
| コミット   | `git commit -m "変更内容説明"` | git log でコミットが確認できる                       | ☐    |
| 履歴確認   | `git log --oneline`      | 直近のコミットが確認できる                             | ☐    |

---

## **4. リモート操作**

| 手順           | コマンド例                            | 確認ポイント             | チェック |
| ------------ | -------------------------------- | ------------------ | ---- |
| プッシュ（初回）     | `git push -u origin feature/xxx` | GitHub にブランチが作成される | ☐    |
| プッシュ（既存ブランチ） | `git push`                       | 最新の変更が反映される        | ☐    |
| プル           | `git pull`                       | ローカルが最新状態に更新       | ☐    |

---

## **5. ブランチ間操作**

| 操作      | コマンド例                                                | 正常時の確認                | コンフリクト時の対応                                        | チェック |
| ------- | ---------------------------------------------------- | --------------------- | ------------------------------------------------- | ---- |
| マージ     | `git checkout develop`<br>`git merge feature/xxx`    | develop に変更統合         | ファイル修正 → `git add` → `git commit`                 | ☐    |
| リベース    | `git checkout feature/xxx`<br>`git rebase develop`   | 履歴が最新 develop 上に置き換わる | ファイル修正 → `git add` → `git rebase --continue`      | ☐    |
| チェリーピック | `git checkout develop`<br>`git cherry-pick <コミットID>` | 特定コミットが反映             | ファイル修正 → `git add` → `git cherry-pick --continue` | ☐    |
| リバート    | `git revert <コミットID>`                                | 過去コミット打ち消し            | ファイル修正 → `git add` → `git revert --continue`      | ☐    |

---

## **6. コンフリクト解消手順**

1. `git status` でコンフリクト発生ファイル確認
2. ファイルをエディタで修正（HEAD / ======= / >>>>>>> を整理）
3. `git add ファイル名`
4. `git commit` または `git rebase --continue` / `git cherry-pick --continue` / `git revert --continue`
5. 再度 `git status` で clean になっていることを確認

---

## **7. 確認チェックリスト**

* [ ] コマンド実行後にメッセージを読む
* [ ] 正常なら「success / up-to-date / clean」を確認
* [ ] 異常なら「error / fatal / CONFLICT」を確認
* [ ] コンフリクト発生時は修正 → add → commit / continue
* [ ] push 前に `git status` / `git log` で状態確認

---

💡 **使い方のポイント**

* このワークシートを開きながら、実際に Git Bash で一つずつコマンドを打って確認
* 正常時の表示とコンフリクト表示を両方経験すると理解が深まる
* ブランチ運用・コミット履歴・リモート操作をセットで体験することが重要

---

もし希望であれば、私はさらに **「Git操作ワークシート＋図解フローチャート版」** を作り、

* チェックリストに対応した図解フローも並べて
* 一枚で「操作 → 正常/異常 → 対応」まで見える形

にすることもできます。

作りますか？
