コンテンツへとスキップする
サイドバーを開く

ChatGPT
あなた:
新人エンジニア　先輩エンジニア　outlookMTG 発表参加依頼　雛形
ChatGPT:
了解です！
新人エンジニアが先輩エンジニアに OutlookでのMTG発表参加依頼メール を送るときの雛形を作成しました。礼儀正しく、簡潔で分かりやすい文章を意識しています。

件名例
【参加依頼】○○プロジェクトに関するMTGのご案内（発表予定）
本文雛形
○○様

お疲れ様です。△△チームの[あなたの名前]です。

この度、○月○日（○）のMTGにて、[議題・内容例：○○プロジェクトの進捗報告]の発表を担当させていただくことになりました。
つきましては、ご参加いただき、アドバイスやご意見をいただけますと幸いです。

【MTG概要】
日時：○月○日（○） ○時〜○時
場所：オンライン（Teams/Zoom） または 会議室○○
議題：[発表内容や目的を簡潔に記載]

お忙しいところ恐縮ですが、ぜひご参加いただけますようお願いいたします。

何かご不明点がございましたらお知らせください。

どうぞよろしくお願いいたします。

[あなたの名前]  
[所属チーム名]  
[内線番号／メールアドレス]
💡 ポイント

件名に「参加依頼」と「発表」を明記 → 先輩が内容を一目で理解できる

簡潔に目的・議題・日時・場所を記載

丁寧な依頼の言葉を入れる（「ご意見いただけますと幸いです」など）

忙しい先輩に配慮して簡潔に

希望があれば、Outlookの 招待メール形式（カレンダー挿入＋説明文） に最適化した雛形も作れます。
作ってほしいですか？

あなた:
vpn接続　勤怠入力　残業について　リモート接続　手順書例とできる雛形
ChatGPT:
わかりました！
新人エンジニアや在宅勤務者向けに VPN接続・勤怠入力・残業申請のリモート接続手順書 の例と汎用雛形を作りました。
簡単にカスタマイズできるように構成しています。

1. 手順書の基本構成例
タイトル
リモート勤務手順書（VPN接続・勤怠入力・残業申請）
目次例
前提条件

VPN接続手順

勤怠入力手順

残業申請手順

トラブルシューティング

連絡先

2. 手順書雛形（サンプル）
1. 前提条件
社内VPNアカウントを取得済み

勤怠システムのログイン情報を持っている

リモートPC／自宅PCで作業可能

2. VPN接続手順
VPNクライアントを起動

「接続先」に会社指定のVPNサーバを入力

ユーザーID・パスワードを入力

接続ボタンを押す

接続完了後、社内ネットワークにアクセス可能か確認

💡ポイント：接続できない場合はネットワークやアカウントを確認し、IT部に連絡

3. 勤怠入力手順
勤怠管理システムにログイン

出勤時間を入力 → 保存

休憩時間を入力 → 保存

退勤時間を入力 → 保存

確認画面で正しく反映されているかチェック

💡ポイント：入力漏れがないか必ず確認

4. 残業申請手順
勤怠システムの「残業申請」画面を開く

日付・開始時間・終了時間・理由を入力

上司の承認を選択

申請ボタンを押す

承認ステータスが「申請中」になったことを確認

5. トラブルシューティング
VPN接続できない → ネットワーク確認、アカウントロック確認

勤怠入力できない → キャッシュ削除、再ログイン

残業申請が承認されない → 上司に連絡

6. 連絡先
ITサポート：内線 xxx / メール xxx@company.com

勤怠管理担当：内線 xxx / メール xxx@company.com

💡 ポイント

新人でも迷わないように「画面操作の順序」を番号で明記

VPNや勤怠システムの操作画面はスクショを挿入するとより分かりやすい

雛形を作っておけば、チーム内で簡単に更新可能

希望であれば、 OutlookやWordでそのまま使えるフォーマット の雛形も作れます。
作りますか？

あなた:
新人エンジニア向け　slack先輩社員　相談　テック　ビジネス　雛形記事
ChatGPT:
了解です！
新人エンジニアが Slackで先輩社員に相談する時の雛形記事 を作りました。
テック・ビジネス両方の相談に使える内容で、礼儀・簡潔さ・読みやすさを意識しています。

新人エンジニア向け：Slackで先輩社員に相談する雛形
はじめに
こんにちは、[チーム名]の新人エンジニア、[あなたの名前]です。
業務や技術のことで分からないことがあるとき、Slackで先輩に相談するときの例をまとめました。
ポイントは「簡潔」「敬意を示す」「相談内容を明確に」 です。

1. 基本の構成
挨拶

簡単に「お疲れ様です」「こんにちは」

自己紹介（初めての場合）

名前・所属チーム・新人であること

相談内容の要点

「何を」「どのように」「どこまで試したか」を簡潔に

質問

具体的に聞きたいことを明確に

締めの言葉

「お忙しいところ恐れ入りますが…」など、敬意を示す

2. 相談雛形（テック系）
お疲れ様です。△△チームの[あなたの名前]です。

現在、[プロジェクト名/タスク名]で[具体的な技術課題]に取り組んでいるのですが、  
[試したことや状況] の状態で詰まっています。

特に、[具体的な質問内容] についてアドバイスをいただけると助かります。

お忙しいところ恐れ入りますが、よろしくお願いいたします。
例：

お疲れ様です。△△チームの友季子です。

現在、社内APIを使ったデータ取得処理でエラーが発生しており、  
requestsでGETリクエストを送っているのですが、タイムアウトになってしまいます。

特に、セッション管理やタイムアウト設定のベストプラクティスについてアドバイスをいただけると助かります。

お忙しいところ恐れ入りますが、よろしくお願いいたします。
3. 相談雛形（ビジネス系）
お疲れ様です。△△チームの[あなたの名前]です。

[プロジェクト名/タスク名]で、[業務上の判断や進め方]について確認したくご相談です。  
[現状の理解や進め方] を考えていますが、[具体的に迷っている点] について意見をいただけますでしょうか。

お忙しいところ恐れ入りますが、よろしくお願いいたします。
例：

お疲れ様です。△△チームの友季子です。

来週の顧客向け資料作成で、スケジュール調整についてご相談です。  
現状、全体スライド案をまとめてからレビューに回す予定ですが、  
優先度の高い部分を先にレビューした方が良いか迷っています。

お忙しいところ恐れ入りますが、アドバイスをいただけますでしょうか。
4. ポイント
Slackは短文でもOK：文章が長すぎると読みづらい

コードや資料がある場合はリンクやスクショを添付

返信をもらいやすい表現：「アドバイスいただけると助かります」など前向きに

💡 新人エンジニア向けに作ったテンプレートなので、これをベースに テック／ビジネスどちらにも応用可能 です。

もし希望であれば、Slackで使える「短縮版ワンライナー雛形」 も作れます。
作りますか？

あなた:
エンジニア技術相談
ChatGPT:
なるほどです！では、新人エンジニアが Slackやメールで先輩に技術相談する際の具体例・雛形 を作ってみます。ポイントは 簡潔・具体的・試したことを明記 です。

新人エンジニア向け 技術相談雛形
1. 基本構成
挨拶

お疲れ様です／こんにちは

自己紹介（初めての場合）

名前・所属チーム・新人であること

相談内容の背景

どのプロジェクト／タスクで困っているか

現状の状況と試したこと

何をやったか、どのような結果になったか

質問内容

具体的にどの部分で助けがほしいか

締めの言葉

「お忙しいところ恐縮ですが…」など

2. 相談雛形（Slack・メール共通）
お疲れ様です。△△チームの[あなたの名前]です。

現在、[プロジェクト名/タスク名]で [具体的な技術課題] に取り組んでいるのですが、  
[試したことや現状の状況] の状態で行き詰まっています。

特に、[具体的に相談したい箇所] についてアドバイスをいただけると助かります。

お忙しいところ恐縮ですが、よろしくお願いいたします。
例1：Python・API相談
お疲れ様です。△△チームの友季子です。

現在、社内APIを使ったデータ取得処理で詰まっています。  
requestsでGETリクエストを送っているのですが、タイムアウトになってしまいます。  
headersや認証情報は確認済みです。

特に、セッション管理やリトライ処理のベストプラクティスについてアドバイスをいただけると助かります。

お忙しいところ恐縮ですが、よろしくお願いいたします。
例2：フロントエンド（React/Vue）相談
お疲れ様です。△△チームの友季子です。

現在、Reactでフォームの入力値を管理する処理を実装しています。  
useStateで状態管理をしているのですが、コンポーネント再レンダリング時に値がリセットされてしまいます。

特に、状態保持のおすすめの実装方法やライフサイクルの考え方についてアドバイスをいただけると助かります。

お忙しいところ恐縮ですが、よろしくお願いいたします。
3. ポイント
具体的に書く → 試したこと・エラー内容・画面スクショやコードも添付すると返信しやすい

一度自分で調べたことも明記 → 先輩も助言しやすくなる

文章は簡潔に → Slackなら短め、メールなら少し丁寧に

希望であれば、Slackで送る短縮ワンライナー版の技術相談テンプレート も作れます。
作りますか？

あなた:
新人エンジニア　slack業務進捗テンプレ
ChatGPT:
了解です！
新人エンジニア向けに Slackでの業務進捗報告テンプレート を作成しました。
短く簡潔に書ける形で、毎日の定例報告やタスク管理に使えます。

新人エンジニア向け Slack 業務進捗テンプレ
1. 基本構成
挨拶

おはようございます／お疲れ様です

本日の作業内容

何をしたか、どのタスクを完了したか

進捗状況

予定通りか、遅れがあるか

課題・相談事項

詰まっている部分、質問や確認したいこと

明日の予定

次に行う作業や目標

2. 報告テンプレ例（Slack向け）
お疲れ様です。△△チームの[あなたの名前]です。

【本日の作業】
- [タスク1] を完了
- [タスク2] を進行中（xx%完了）

【進捗状況】
- 全体として予定通り／遅れあり（理由：xxx）

【課題・相談事項】
- [タスク2] でエラーが発生、対応方法を確認したいです

【明日の予定】
- [タスク2] を完了
- [タスク3] の設計レビューに参加
3. ポイント
簡潔に箇条書き → 読む人がすぐ理解できる

課題・相談事項は明確に → 先輩がアドバイスしやすい

進捗状況は率直に → 遅れがある場合は理由も添える

💡 補足

毎日の定例報告で使いやすい

チーム内で統一フォーマットにしておくと管理しやすい

Slackではコードやスクショも添付できるとさらにわかりやすい

希望であれば、毎日投稿用に1行で簡潔にまとめる「超短縮版Slack進捗テンプレ」 も作れます。作りますか？

あなた:
Git発表テンプレ　新人エンジニア　業務参画最初覚えること手順書雛形　記載例
ChatGPT:
了解です！
新人エンジニア向けに Gitの業務参画時に覚える基本操作・手順書テンプレ を作りました。
発表用にも使えるように、手順書形式＋記載例を含めています。

新人エンジニア向け Git 業務参画手順書雛形
1. タイトル例
Git 業務参画手順書（新人エンジニア向け）
2. 目次例
前提条件

Git環境の初期設定

リポジトリのクローン

ブランチ操作

ファイルの追加・コミット

プルリクエスト（PR）の作成

マージ・コンフリクト対応

発表用まとめ・図解

参考資料

3. 手順書雛形（記載例付き）
1. 前提条件
GitがPCにインストール済み

GitHub / GitLabのアカウント取得済み

社内リポジトリのアクセス権限あり

2. Git環境の初期設定
# ユーザー名・メール設定
git config --global user.name "Your Name"
git config --global user.email "your.email@company.com"

# 設定確認
git config --list
💡ポイント：必ず社内メールとGitユーザー名を一致させる

3. リポジトリのクローン
git clone <リポジトリURL>
cd <リポジトリ名>
目的：最新のソースコードをローカルPCにコピー

注意：クローン先は作業用フォルダを決めて統一

4. ブランチ操作
# ブランチ一覧確認
git branch -a

# 新しい作業ブランチ作成
git checkout -b feature/<自分の名前>-<作業内容>
💡ポイント：ブランチ名は分かりやすく統一

5. ファイルの追加・コミット
# 変更内容確認
git status

# ファイルをステージング
git add <ファイル名>

# コミット
git commit -m "feat: <作業内容を簡潔に記載>"
💡

あなた:
エンジニア技術調査　Git課題実践発表テンプレ　記載例
ChatGPT:
了解です！
新人エンジニア向けに Gitの課題・技術調査の実践発表テンプレート を作成しました。
発表用にそのまま使えるよう、手順・成果・図解の記載例も含めています。

新人エンジニア向け Git 課題実践発表テンプレ
1. タイトル例
Git 課題実践報告（新人エンジニア向け）
2. 目次例
調査・課題の目的

調査内容・対象

実施手順

実践結果・スクリーンショット

学んだこと・課題点

次回改善点

参考資料

3. 記載例
1. 調査・課題の目的
Gitの基本操作（clone、branch、commit、merge、rebase）を理解する

チーム開発でのコンフリクト対応を体験する

2. 調査内容・対象
対象リポジトリ：社内サンプルリポジトリ

調査対象：ブランチ運用、マージフロー、コンフリクトの発生と解消

3. 実施手順（手順書風に記載）
リポジトリをクローン

git clone <リポジトリURL>
cd <リポジトリ名>
作業ブランチを作成

git checkout -b feature/first_task
変更を加え、コミット

git add README.md
git commit -m "feat: 初期README修正"
リモートにプッシュ

git push origin feature/first_task
プルリクエストを作成しレビュー依頼

💡ポイント：作業ブランチは必ずPRを経てmain/masterにマージ

意図的にコンフリクトを発生させ、解消

git fetch origin
git merge origin/main
# コンフリクト発生 → 修正 → add → commit
4. 実践結果・スクリーンショット
作業ブランチで変更したファイル

Git log や GitHub PR画面のスクリーンショット

コンフリクト解消後の状態

5. 学んだこと・課題点
Gitの基本操作の理解

コンフリクト時のマージ方法を体験

課題：複数人作業時のブランチ命名ルールの重要性

6. 次回改善点
rebaseやcherry-pickの活用

PRテンプレートの利用

コミットメッセージの統一

7. 参考資料
Git公式ドキュメント

GitHub Docs

💡 ポイント

発表用なら「スクリーンショット＋手順＋学び」をセットで載せる

実務的に「課題→手順→結果→学び→改善」を順番に示すと分かりやすい

図解（ブランチ構成やフロー図）を入れると理解が早くなる

希望であれば、SlackやQiita用に短くまとめた報告用テンプレ も作れます。
作りますか？

あなた:
発表用なら「スクリーンショット＋手順＋学び」をセットで載せる

実務的に「課題→手順→結果→学び→改善」を順番に示すと分かりやすい

図解（ブランチ構成やフロー図）を入れると理解が早くなる


テンプレ　記載例
ChatGPT:
了解です！
では、新人エンジニア向けに Git課題実践発表用テンプレート を「課題→手順→結果→学び→改善」の流れで、スクリーンショットや図解も載せる形式で具体的に作ります。

Git 課題実践発表テンプレート（新人エンジニア向け）
1. 課題（Problem / 調査テーマ）
目的：Gitの基本操作とチーム開発フローを理解する

課題内容：

作業ブランチの作成からPRまでの一連の操作

コンフリクトを発生させて解消

コミットメッセージの書き方を統一する

2. 手順（Procedure / 実施手順）
リポジトリをクローン

git clone <リポジトリURL>
cd <リポジトリ名>
作業ブランチを作成

git checkout -b feature/<自分の名前>-task1
変更を加えてコミット

git add README.md
git commit -m "feat: README修正"
リモートにプッシュ

git push origin feature/<自分の名前>-task1
プルリクエストを作成

意図的にコンフリクトを発生させ、解消

git fetch origin
git merge origin/main
# コンフリクト発生 → 修正 → add → commit
💡 ポイント：各手順にスクリーンショットを添付

git log の画面

GitHub PR画面

コンフリクト修正画面

3. 結果（Result / 成果物）
作業ブランチからPR作成まで完了

コンフリクト解消成功

mainブランチにマージ完了

💡 図解例：

main
 ├─ feature/task1 (自分の作業)
 └─ feature/task2 (他メンバー)
コンフリクト発生箇所を色付きで図示

4. 学び（Learning）
Git操作の基本が身についた

コンフリクト解消の流れを体験

チーム開発でのブランチ命名ルールの重要性を理解

5. 改善（Next Action）
rebaseやcherry-pickの活用方法を学ぶ

PRテンプレートを活用してレビュー効率を向上

コミットメッセージのフォーマットを統一

💡 発表ポイント

スクリーンショット＋手順＋学び をセットで載せる

課題→手順→結果→学び→改善 の順で構成

図解 を入れるとブランチ構成や作業フローが直感的に理解できる

希望であれば、このテンプレを PowerPoint発表用にそのまま流用できる図解入りスライド形式 にも変換した例を作れます。作りますか？

あなた:
スライドテンプレ
ChatGPT:
了解です！
では、新人エンジニア向けの Git課題実践発表用スライドテンプレート を作ります。
「課題→手順→結果→学び→改善」の流れをスライド構成に落とし込み、図解やスクリーンショットを載せやすい形式です。

Git課題実践発表スライドテンプレート（新人エンジニア向け）
スライド1：タイトル
タイトル例：Git課題実践報告

サブタイトル：新人エンジニア向け

氏名 / チーム名 / 日付

スライド2：課題（Problem）
目的：Gitの基本操作とチーム開発フローの理解

課題内容：

作業ブランチの作成からPRまでの一連操作

コンフリクト発生・解消

コミットメッセージの統一

💡ポイント：箇条書きで簡潔に

スライド3：手順（Procedure）
手順一覧（番号付き）

リポジトリをクローン

作業ブランチ作成

ファイル変更 → コミット

リモートにプッシュ

プルリクエスト作成

コンフリクト発生 → 解消

スクリーンショット挿入例：

Git log画面

GitHub PR画面

コンフリクト修正画面

💡ポイント：1手順1スクリーンショットが理想

スライド4：結果（Result）
作業ブランチからPR作成まで完了

コンフリクト解消成功

mainブランチにマージ完了

図解例（ブランチ構成）

main
 ├─ feature/task1 (自分の作業)
 └─ feature/task2 (他メンバー)
コンフリクト箇所を色で強調すると分かりやすい

スライド5：学び（Learning）
Git操作の基本が身についた

コンフリクト解消の流れを体験

チーム開発でのブランチ命名ルールの重要性を理解

💡ポイント：箇条書き＋スクショや図解で補足

スライド6：改善（Next Action）
rebaseやcherry-pickの活用方法を学ぶ

PRテンプレート活用でレビュー効率向上

コミットメッセージのフォーマットを統一

スライド7：参考資料
Git公式ドキュメント

GitHub Docs

💡 発表用のポイント

「課題→手順→結果→学び→改善」の順で1スライドずつ

スクリーンショット＋図解を入れる

箇条書きは簡潔に、文字数は少なめ

発表時間を意識して1スライド1分前後が目安

希望であれば、私がこのテンプレを PowerPoint用のスライド構成サンプル として、見出し・箇条書き・図解の位置まで具体的に作ることもできます。

作りますか？

あなた:
お願いします
ChatGPT:
了解です！
では、新人エンジニア向け Git課題実践発表用 PowerPointスライドサンプル を具体的に作りました。
見出し・箇条書き・図解・スクリーンショット挿入位置までイメージできる構成です。

Git課題実践発表用スライド構成サンプル
スライド1：タイトル
見出し：Git課題実践報告

サブタイトル：新人エンジニア向け

内容：

氏名：[あなたの名前]

チーム名：[△△チーム]

日付：[YYYY/MM/DD]

図解/装飾：

左下にGitアイコンや会社ロゴ

背景はシンプルなグラデーション

スライド2：課題（Problem）
見出し：課題と目的

箇条書き：

Gitの基本操作（clone, branch, commit, merge, rebase）の理解

チーム開発でのコンフリクト解消を体験

コミットメッセージの統一

図解：

「課題→目的→成果」の簡易フロー図

スライド3：手順（Procedure）
見出し：実施手順

番号付きリスト：

リポジトリをクローン

作業ブランチ作成

ファイル変更 → コミット

リモートにプッシュ

プルリクエスト作成

コンフリクト発生 → 修正 → コミット

スクリーンショット挿入位置：

右側にGit log画面

左下にGitHub PR画面

下部にコンフリクト修正画面

スライド4：結果（Result）
見出し：実施結果

箇条書き：

作業ブランチからPR作成まで完了

コンフリクト解消成功

mainブランチにマージ完了

図解：

main
 ├─ feature/task1 (自分の作業)
 └─ feature/task2 (他メンバー)
コンフリクト箇所は赤色でハイライト

ブランチ構成図は中央に大きく配置

スライド5：学び（Learning）
見出し：学んだこと

箇条書き：

Git操作の基本理解

コンフリクト解消フローの体験

ブランチ命名ルールの重要性

補足図：

コンフリクト解消手順の簡易フロー図（右側）

スライド6：改善（Next Action）
見出し：次回改善点

箇条書き：

rebase・cherry-pickの活用

PRテンプレート活用でレビュー効率向上

コミットメッセージフォーマットの統一

図解：

左側に「現状→改善」の矢印図

スライド7：参考資料
Git公式ドキュメント

GitHub Docs

社内Git運用マニュアル

💡 発表のポイント

スライド1枚につき 1テーマ（課題/手順/結果/学び/改善）

スクリーンショット＋図解＋箇条書き のセットで分かりやすく

箇条書きは簡潔に、文字は大きめで視認性重視

発表時間は1スライド1分程度を目安

希望であれば、この構成を PowerPointファイル形式で使えるスライドサンプル（実際の文字配置と図解イメージ入り） に落とした例も作れます。

作りますか？

あなた:
新人エンジニア　outlook業務終了　進捗報告メール書き方テンプレ　と新人エンジニア　先輩おそわったこと　タスク整理マニュアル記事　テクニカル
ChatGPT:
了解です！
では、新人エンジニア向けに 2つの記事・テンプレ を作ります。

Outlookで業務終了時に送る進捗報告メールの書き方テンプレ

先輩に教わったことを整理するタスク管理マニュアル（テクニカル寄り）

1. Outlook 業務終了時 進捗報告メールテンプレ（新人向け）
件名例
[△△チーム] 本日の業務報告（[自分の名前]）
本文テンプレ
お疲れ様です。△△チームの[あなたの名前]です。

本日の作業状況についてご報告いたします。

【本日の作業内容】
- [タスク1]：完了
- [タスク2]：進行中（xx%完了）
- [タスク3]：未着手（理由：xxx）

【課題・相談事項】
- [タスク2] の処理でエラーが発生 → 対応方法をご確認いただきたいです

【明日の予定】
- [タスク2] の対応完了
- [タスク3] の着手

お忙しいところ恐れ入りますが、よろしくお願いいたします。
💡 ポイント

件名に日付やチーム名を入れると管理しやすい

本文は「作業内容・課題・明日の予定」の3セットが基本

箇条書きで簡潔にまとめる

課題や相談事項は具体的に書く

2. 新人エンジニア向け 先輩に教わったことのタスク整理マニュアル（テクニカル）
目的
先輩に教わったことや業務手順を整理

自分の作業効率を上げ、チームに正確に報告できる

1. 記録方法
ツール例：Notion、OneNote、Excel、Slackメモ

記録内容

日付

相談内容／学んだこと

実施した手順

注意点・Tips

次回活用予定

2. テンプレ例（Excel/Notion向け）
日付	タスク/相談内容	手順	注意点/Tips	次回活用
2025/10/08	Gitブランチ作成で詰まった	git checkout -b で新規作成	ブランチ名は統一する	PR作成時活用
2025/10/08	Slackで進捗報告	箇条書きで3セット記載	件名に日付とチーム名	日報メールで活用
3. 手順書化のポイント
整理する習慣をつける → 毎日5分で記録

見やすく分類 → 技術・ビジネス・進捗のカテゴリ別

スクショやコード例を添付 → 再利用性アップ

復習＆改善 → 週1でまとめ直すと理解が定着

💡 メリット

自分の作業ミスを減らせる

先輩への報告・質問が効率的にできる

業務の「型」が身につき、チーム貢献しやすくなる

希望であれば、このマニュアルを Slack・Notion・Excel用の記入雛形ファイル形式 に落とした例も作れます。

作りますか？

あなた:
slack
ChatGPT:
了解です！
では、先ほどの 「先輩に教わったことのタスク整理マニュアル」 を Slack用テンプレート に変換します。
Slackでは箇条書きやブロックメッセージを使うと整理しやすく、メンションやリンクも活用できます。

新人エンジニア向け Slack タスク整理テンプレ
1. 日次報告用テンプレート
お疲れ様です。△△チームの[あなたの名前]です。

【本日学んだこと／相談内容】
- [タスク名／相談内容]
  - 手順： [実施手順・コマンド例]
  - 注意点／Tips： [ポイント]
  - 次回活用： [活用予定や改善点]

【本日の課題・相談】
- [課題内容や確認したいこと]

【明日の予定】
- [作業予定タスク]
例

お疲れ様です。△△チームの友季子です。

【本日学んだこと／相談内容】
- Gitブランチ作成で詰まった
  - 手順： git checkout -b feature/task1
  - 注意点／Tips： ブランチ名は統一する
  - 次回活用： PR作成時に同ルールで作業

【本日の課題・相談】
- 作業中のREADME更新がコンフリクトした場合の対処方法を確認したいです

【明日の予定】
- README更新作業の続き
- 新規機能追加タスクに着手
2. Slack用整理Tips
メッセージは箇条書き中心 → 見やすく、スクロール確認しやすい

ブロックメッセージを活用 → /remindや固定チャンネルで管理も可能

スクリーンショットやコード添付 → 説明が早く、後から確認しやすい

日付やタスク名を明記 → 検索しやすく、後で振り返れる

💡 発展案

「#新人メモ」や「#技術メモ」専用チャンネルを作り、毎日学んだことや相談内容を投稿

投稿を週次でまとめて NotionやExcelに整理 すると業務手順マニュアルとして再利用可能

希望であれば、Slackにそのままコピペできる日次・週次テンプレート をさらに整形して作ります。
作りますか？

あなた:
手順書マニュアル　テック　非テック
ChatGPT:
了解です！
では、新人エンジニア向けに 「手順書マニュアル」 を テック系（技術的作業） と 非テック系（事務・一般業務）」 の両方で作成する場合の雛形・書き方を整理します。
ポイントは 誰が読んでも再現できること、段階的に手順を明確にすること です。

新人エンジニア向け 手順書マニュアル雛形
1. 共通ルール
手順は 番号付きで順序通り

画面キャプチャやスクショを必ず添付

注意点・Tipsは赤字やアイコンで強調

用語・略語は注釈をつける

テック系・非テック系で書き方のトーンを分ける

2. テック系手順書例（開発・技術作業）
タイトル
Git ブランチ作成とPR手順（新人エンジニア向け）
目的
Gitの基本操作を理解

チーム開発でのブランチ運用を習得

手順
リポジトリをクローン

git clone <リポジトリURL>
cd <リポジトリ名>
作業ブランチ作成

git checkout -b feature/<名前>-<作業内容>
変更を加える

ファイル編集、コード追加

ステージング・コミット

git add .
git commit -m "feat: <作業内容>"
リモートにプッシュ

git push origin feature/<名前>-<作業内容>
プルリクエスト作成

スクリーンショットを添付

注意点：レビュー依頼前にテスト必須

注意点 / Tips
コミットメッセージは feat: fix: 形式で統一

コンフリクト時は git fetch → git merge で解消

3. 非テック系手順書例（事務・一般業務）
タイトル
勤怠入力・残業申請手順（新人向け）
目的
勤怠システムで正確に勤務時間・残業を申請

上司・総務に報告漏れを防ぐ

手順
VPN接続

手順書に沿って社内ネットワークに接続

勤怠システムにログイン

URL：[勤怠システムURL]

ID・パスワードを入力

勤務時間入力

出勤・退勤・休憩時間を入力

申請ボタンをクリック

残業申請（必要な場合）

「残業申請」画面を開く

時間・理由を入力 → 申請ボタン

確認・ログアウト

入力内容を再確認

ログアウトしてVPN切断

注意点 / Tips
勤怠入力は当日中に行うこと

残業理由は簡潔に具体的に記載

申請ミスは総務へ即連絡

4. テック vs 非テックの書き分けポイント
項目	テック系	非テック系
言葉のトーン	コマンド・コード中心	操作手順・UI中心
図解	フロー図・ブランチ図	画面スクショ・フォーム例
注意点	技術的ミス回避	入力ミス回避・承認漏れ防止
添付例	コード・ログ	スクショ・入力例
💡 まとめ

新人でも再現可能な手順を意識

スクショやフロー図は必須

技術作業はコマンド例中心、事務作業はUI操作中心で書く

もし希望であれば、この テック／非テック両方の手順書をSlack投稿用やOutlook送信用テンプレ に変換した例も作れます。

作りますか？

あなた:
お願いします
ChatGPT:
了解です！
では、先ほどの テック系／非テック系手順書マニュアル を Slack投稿用／Outlook送信用テンプレ に落とし込んだ例を作ります。
新人エンジニアがそのまま使える形式です。

1. Slack投稿用テンプレ（テック系）
お疲れ様です。△△チームの[あなたの名前]です。

【作業内容】
- Gitブランチ作成からPR作成まで実施

【手順】
1. リポジトリをクローン
   git clone <リポジトリURL>
2. 作業ブランチ作成
   git checkout -b feature/<名前>-<作業内容>
3. 変更を加えコミット
   git add .
   git commit -m "feat: <作業内容>"
4. リモートにプッシュ
   git push origin feature/<名前>-<作業内容>
5. プルリクエスト作成

【注意点/Tips】
- コミットメッセージは feat:/fix: 形式で統一
- コンフリクト時は git fetch → git merge で解消

【次回対応】
- レビューコメント反映
- rebaseの手順確認
💡ポイント：

箇条書き＋コードブロックで読みやすく

スクショやPRリンクを添付するとさらに分かりやすい

2. Slack投稿用テンプレ（非テック系）
お疲れ様です。△△チームの[あなたの名前]です。

【本日対応業務】
- 勤怠入力、残業申請

【手順】
1. VPN接続
2. 勤怠システムにログイン
3. 出勤・退勤・休憩時間を入力
4. 残業申請（必要な場合）
   - 時間・理由を入力
5. 入力内容確認 → 申請 → ログアウト

【注意点/Tips】
- 勤怠入力は当日中に完了
- 残業理由は具体的に記載
- 申請ミスは総務へ即連絡

【次回予定】
- 翌日の勤怠入力と残業申請
3. Outlook送信用テンプレ（テック系／非テック系共通）
件名例
[△△チーム] 本日の業務報告（[あなたの名前]）
本文テンプレ
お疲れ様です。△△チームの[あなたの名前]です。

【本日の作業内容】
- [テック系] Gitブランチ作成～PR作成まで完了
- [非テック系] 勤怠入力・残業申請完了

【課題・相談事項】
- [テック系] コンフリクト解消手順の確認が必要
- [非テック系] 残業申請の承認フロー確認

【明日の予定】
- [テック系] PRレビュー対応、rebase手順確認
- [非テック系] 勤怠入力と残業申請

お忙しいところ恐れ入りますが、よろしくお願いいたします。
💡ポイント：

Slack用は簡潔に箇条書きで報告

Outlook用はフォーマルにまとめ、課題・相談事項も添える

どちらも新人がそのままコピー＆ペースト可能

もし希望であれば、このSlack／Outlookテンプレを日次・週次用にさらに整形して「毎日投稿・送信しやすい雛形ファイル（Excel or Notion形式）」 にすることもできます。

作りますか？




選択されていません選択されていません
ChatGPT の回答は必ずしも正しいとは限りません。重要な情報は確認するようにしてください。
