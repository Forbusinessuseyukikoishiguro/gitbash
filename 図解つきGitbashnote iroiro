いいですね👍
では今回は、**「図解つきGit・GitHub超入門：add / commit / branch / merge / PR / conflict / origin」**を、
💻 **Git Bashの実際の操作＋読み方**つきで、**新人エンジニアでも即わかるように**解説します！

---

## 🗂 全体イメージ（図解）

```
┌────────────────────────────┐
│     GitHub（リモート）         │
│   └── origin/main（本番）       │
└────────────────────────────┘
             ▲ push / pull
             │
┌────────────────────────────┐
│   ローカルPC（Git Bash操作）     │
│   ├── main（コピー元）           │
│   └── feature/add-login（作業用）│
└────────────────────────────┘
```

Git Bash は、リモート（GitHub）との「橋渡し役」です🌉。

---

## 🧱 1️⃣ リポジトリを作る（Repository）

**読み方：** リポジトリ（Repository）＝プロジェクトの「保管庫」

### 🔧 手順（Git Bash）

```bash
# プロジェクト用のフォルダを作る
mkdir my_project       # 読み：メイクディレクトリ
cd my_project          # 読み：チェンジディレクトリ

# Gitリポジトリを初期化
git init               # 読み：ギット イニット
```

👉 `git init`で、`.git`フォルダができ、「バージョン管理」が始まります。

---

## 🧩 2️⃣ ファイルを追加・変更（add / commit）

**add：** ステージに登録（準備）
**commit：** 確定して履歴に残す

### 🧠 図解

```
作業フォルダ → ステージ → リポジトリ履歴
    ↑add           ↑commit
```

### 💻 コマンド例

```bash
git add main.py       # 読み：ギット アッド
git commit -m "初回コミット"   # 読み：ギット コミット
```

---

## 🌿 3️⃣ ブランチ（branch）

**読み方：** ブランチ＝作業の「枝」

* `main`（メインブランチ）＝本番
* `feature/○○`（フィーチャーブランチ）＝開発用

### 💻 コマンド例

```bash
git branch             # ブランチ一覧確認
git branch feature/add-login   # 新しいブランチ作成
git checkout feature/add-login # 切り替え
```

（最近は `git switch` コマンドも人気↓）

```bash
git switch feature/add-login
```

---

## 🔀 4️⃣ マージ（merge）

**読み方：** マージ＝他のブランチを「統合」する。

### 💻 例：featureブランチをmainに反映

```bash
git checkout main
git merge feature/add-login
```

### ⚠️ コンフリクト（Conflict）

2人が同じファイルの同じ行を変更すると発生。

#### 図解

```
main:   print("Hello")
feat:   print("Hi")

→ コンフリクト！
```

#### 解決手順

1. ファイルを開くと、下記のように印が出る👇

   ```
   <<<<<<< HEAD
   print("Hello")
   =======
   print("Hi")
   >>>>>>> feature/add-login
   ```
2. 正しい行を残して保存。
3. 修正したら：

   ```bash
   git add .
   git commit -m "コンフリクト解消"
   ```

---

## ☁️ 5️⃣ リモートリポジトリとorigin

**origin：** GitHubのリポジトリの「あだ名」

### 💻 接続例

```bash
git remote add origin git@github.com:username/my_project.git
```

### 🔁 リモートへプッシュ（push）

```bash
git push -u origin main
```

---

## 🧭 6️⃣ Pull Request（PR）

**読み方：** プルリクエスト
＝「自分のブランチをmainに取り込んでください」という提案

### 💡 手順の流れ

1. featureブランチで開発
2. GitHubへpush
3. GitHub画面で「Compare & Pull Request」クリック
4. コメントを入れて「Create Pull Request」

---

## 🍒 7️⃣ チェリーピック（cherry-pick）

**読み方：** チェリーピック
＝「特定のコミットだけを別ブランチに取り込みたい」

### 💻 例

```bash
git log                  # コミットID確認
git checkout main
git cherry-pick <commit-id>
```

---

## 🆘 8️⃣ トラブル時のリカバリー

| 状況            | コマンド                   | 意味        |
| ------------- | ---------------------- | --------- |
| 間違えてステージした    | `git reset`            | add取り消し   |
| 直前のcommitやり直し | `git commit --amend`   | 上書きコミット   |
| マージミス         | `git merge --abort`    | マージを中止    |
| 最新ブランチを取り込み   | `git pull origin main` | リモート更新を取得 |
| ブランチを戻す       | `git checkout <ブランチ>`  | 移動し直す     |

---

## 🖼️ 全体の流れ（まとめ図）

```
[GitHub:origin/main]
          ↑ push / PR
[ローカル:main]
   ↓ branch
[feature/add-login]
   ↓ add → commit → push
          ↓ PR
→ GitHubでレビュー＆merge！
```

---

ご希望あれば、
次は「**図つき：Gitリベース・リバート実演（再現・回復）編**」として、
「リベースで履歴を整理」「リバートで間違いを戻す」例を
Git Bashの実行画面風にまとめましょうか？
