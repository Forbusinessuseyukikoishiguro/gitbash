もちろんです 👍
では、**新人エンジニア向けに「Git Bashで行うチーム開発トラブル対応チートシート」**を、図解イメージを交えながらわかりやすく解説します！

---

# 🧭 Git Bash チーム開発トラブル対応チートシート

（Qiita風まとめ・図解つき）

---

## 🪴 はじめに

こんにちは！TechCommitメンバーの **友季子** です 🌸
今回は「チーム開発中に起きやすいGitトラブル」と「Git Bashでの対処法」を、
新人エンジニアでも理解しやすいようにステップでまとめました。

---

## 🧱 1. まず理解しておくべき構造図

```
ローカルPC（自分の環境）
   ├─ 作業ディレクトリ（ファイル実体）
   ├─ ステージ（addした変更）
   └─ ローカルリポジトリ（commit履歴）

↓ push

リモートリポジトリ（GitHubなど）
```

💡 **よくある混乱ポイント**

| 状況            | 原因         | 対応コマンド                  |
| ------------- | ---------- | ----------------------- |
| ファイルが反映されない   | addしてない    | `git add .`             |
| コミットされない      | commitしてない | `git commit -m "メッセージ"` |
| GitHubに反映されない | pushしてない   | `git push origin ブランチ名` |

---

## ⚠️ 2. よくあるチーム開発トラブルと対応

### 🧩 A. 他の人の変更が入ってマージコンフリクト！

#### 💥 原因：

同じファイル・同じ行を**複数人が変更した**。

#### 🧰 対処手順：

```bash
# 1. 最新状態を取得
git fetch origin

# 2. 自分の作業ブランチにマージ
git merge origin/main
```

🔽 コンフリクト発生例

```
<<<<<<< HEAD
print("自分の変更")
=======
print("相手の変更")
>>>>>>> origin/main
```

🔧 対応：
編集して、どちらを残すか決めたあとに：

```bash
git add .
git commit
```

💡 修正後に push し直す：

```bash
git push origin 自分のブランチ
```

---

### 🧩 B. 間違ってコミット・プッシュした！

#### 💥 原因：

* 不要ファイルを commit
* 間違ったメッセージで push

#### 🧰 対処：

```bash
# コミット取り消し（ファイルは残る）
git reset --soft HEAD^

# コミット＋ステージも戻す
git reset --mixed HEAD^

# 全部取り消す（ファイルも戻す）
git reset --hard HEAD^
```

⚠️ push後の場合は

```bash
git push -f origin ブランチ名
```

※ 強制上書き（チーム開発では注意！）

---

### 🧩 C. Pullしたら他人の作業と衝突！

#### 💥 原因：

ローカルとリモートの履歴がずれている。

#### 🧰 対処手順：

```bash
# 1. 作業を一時退避
git stash

# 2. リモートの最新を取得
git pull origin main

# 3. 作業を戻す
git stash pop
```

💡 `stash` は「一時避難リュック」みたいなもの。

---

### 🧩 D. コミットメッセージを修正したい！

```bash
git commit --amend -m "正しいメッセージ"
```

⚠️ すでに push 済みなら、

```bash
git push -f origin ブランチ名
```

---

### 🧩 E. 別ブランチの変更だけ取り込みたい（チェリーピック）

```bash
# 取り込みたいコミットを指定
git cherry-pick <コミットID>
```

💡 コミットIDは：

```bash
git log --oneline
```

で確認。

---

## 🪶 3. 緊急リカバリー早見表

| 状況           | コマンド                 | 意味        |
| ------------ | -------------------- | --------- |
| コンフリクト起きた    | `git merge --abort`  | マージ中止     |
| リベース失敗した     | `git rebase --abort` | リベース中止    |
| コンフリクト1件スキップ | `git rebase --skip`  | 問題箇所だけ飛ばす |
| コミット履歴確認     | `git log --oneline`  | 短く履歴表示    |
| ファイル状態確認     | `git status`         | 現在の変更確認   |

---

## 🧭 4. チームでの基本フロー再確認！

1️⃣ `git pull origin main` で最新を取り込む
2️⃣ 作業ブランチを作成

```bash
git checkout -b feature/xxx
```

3️⃣ 編集して `git add` → `git commit`
4️⃣ `git push origin feature/xxx`
5️⃣ GitHubでプルリク（PR）を出す
6️⃣ コンフリクトがあれば修正

---

## 🌈 5. 図解まとめイメージ

```
[main] ← pull ← [feature/自分のブランチ]
       ↑          ↓
    PR作成 → merge
```

---

## 🌸 終わりに

チーム開発では「トラブル対応力」が信頼につながります。
焦らず、**状態を確認 → 正しいコマンドで対処 → チームに共有** の流れを意識してみましょう。

---

もしよければ次に、
✅ 「Git Bash 操作結果の読み方」
✅ 「Git チーム開発フロー完全図」
✅ 「コンフリクト実演付き例」

のいずれかを続けてまとめましょうか？
どれを知りたいですか？
