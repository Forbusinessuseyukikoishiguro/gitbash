了解です ✨
では今回は、**チーム開発で中級〜上級エンジニアが押さえておくべき「Git 用語チートシート」**を、Qiita風にわかりやすくまとめます。
Git Bash 操作や実務でもよく使う専門用語・概念・応用コマンドを中心に解説します！

---

# 🧠 Git用語チートシート（中級〜上級編）

> チーム開発・トラブル対応・履歴管理・レビュー効率化まで
> 「実務で差がつくGit理解」をQiita風にまとめました。

---

## 🪴 はじめに

こんにちは、TechCommitメンバーの **友季子** です🌸
今回は、「add や commit は分かったけど、その先が難しい…」という新人〜中堅向けに、
Git の中級〜上級用語を体系的に整理しました。
「用語の意味＋現場での使われ方＋例コマンド」で、すぐ実務に役立ちます。

---

## 📘 1. リポジトリ関連の用語

| 用語                     | 意味                | 実務でのポイント                       |
| ---------------------- | ----------------- | ------------------------------ |
| **ローカルリポジトリ**          | 自分のPC上のGit履歴      | 作業中の変更をここで管理                   |
| **リモートリポジトリ**          | GitHubなどの共有サーバ上   | チーム全体で共有する場所                   |
| **クローン（clone）**        | リモートをローカルにコピー     | `git clone URL` で開始            |
| **フォーク（fork）**         | リポジトリの複製（GitHub上） | OSSなど他人のプロジェクト修正用              |
| **アップストリーム（upstream）** | 元リポジトリ            | fork元を指す設定                     |
| **オリジン（origin）**       | 通常のリモート名          | `git push origin main` のorigin |

🧩 コマンド例：

```bash
git remote -v          # リモート設定確認
git remote add upstream https://github.com/xxxx/project.git
```

---

## 🌿 2. ブランチ操作系

| 用語                         | 意味               | コマンド例                            |
| -------------------------- | ---------------- | -------------------------------- |
| **ブランチ（branch）**           | 作業の分岐            | `git branch feature/login`       |
| **チェックアウト（checkout）**      | ブランチの切替 or 復元    | `git checkout main`              |
| **トラッキングブランチ**             | リモートと紐づくローカルブランチ | `git checkout -b dev origin/dev` |
| **デタッチヘッド（detached HEAD）** | ブランチにいない状態（危険）   | `git checkout <commit-id>` で発生   |
| **タグ（tag）**                | バージョン番号を記録       | `git tag v1.0`                   |

💡 HEADとは？

```
HEAD → 現在のコミットを指すポインタ
```

---

## 🧩 3. マージ・リベース系（差が出る応用概念）

| 用語                       | 意味             | 実務の違い           |
| ------------------------ | -------------- | --------------- |
| **マージ（merge）**           | 履歴を統合（枝を合わせる）  | 既存の履歴を保つ（安全）    |
| **リベース（rebase）**         | 履歴を並び替え（線形化）   | 履歴をきれいに整える（慎重に） |
| **スカッシュ（squash）**        | 複数コミットを1つにまとめる | PR前の整理に最適       |
| **チェリーピック（cherry-pick）** | 特定コミットだけ反映     | 他ブランチの修正を部分導入   |
| **コンフリクト（conflict）**     | マージ衝突          | 同一ファイル・同一行変更で発生 |

🧰 よく使うコマンド例：

```bash
git merge feature/api
git rebase main
git cherry-pick a1b2c3d
git rebase -i HEAD~3   # 直近3コミット整理
```

---

## 🔄 4. コミットと履歴管理

| 用語               | 意味             | コマンド例                    |
| ---------------- | -------------- | ------------------------ |
| **コミットID（SHA）**  | 変更履歴の識別番号      | `git log --oneline` で確認  |
| **アメンド（amend）**  | 直前コミットを修正      | `git commit --amend`     |
| **リセット（reset）**  | 履歴を戻す（危険）      | `git reset --hard HEAD^` |
| **リバート（revert）** | 過去の変更を打ち消す（安全） | `git revert <commit-id>` |
| **ステージ（index）**  | commit前の一時保存場所 | `git add .` で登録          |
| **ワーキングツリー**     | 実際の作業ファイル群     | 編集中のファイル領域               |

📊 履歴確認の定番：

```bash
git log --oneline --graph --decorate
```

---

## 🧰 5. 一時退避・変更管理

| 用語                  | 意味      | コマンド例                         |
| ------------------- | ------- | ----------------------------- |
| **スタッシュ（stash）**    | 変更を一時退避 | `git stash`, `git stash pop`  |
| **差分（diff）**        | 変更の比較   | `git diff`                    |
| **インタラクティブモード（-i）** | 選択的操作   | `git add -i`, `git rebase -i` |
| **パッチ（patch）**      | 特定差分の記録 | `git diff > fix.patch`        |

---

## 🧭 6. リモート操作・プルリク関係

| 用語              | 意味              | コマンド例                    |
| --------------- | --------------- | ------------------------ |
| **フェッチ（fetch）** | リモート更新を取得（反映なし） | `git fetch origin`       |
| **プル（pull）**    | フェッチ＋マージ        | `git pull origin main`   |
| **プッシュ（push）**  | ローカルをリモートに反映    | `git push origin branch` |
| **プルリクエスト（PR）** | GitHub上での変更提案   | UI操作 or CLI経由            |
| **レビュー**        | 他人のコードを確認する工程   | `git diff` で差分確認         |

---

## ⚙️ 7. 高度なトラブルシュート用語

| 用語                         | 意味            | コマンド例                             |
| -------------------------- | ------------- | --------------------------------- |
| **HEADのデタッチ**              | ブランチ外での作業     | `git switch -c temp HEAD`         |
| **リフログ（reflog）**           | HEADの移動履歴     | `git reflog`                      |
| **オーブファイル（orphan branch）** | 履歴を持たない新規ブランチ | `git checkout --orphan newbranch` |
| **ブロッサム（blame）**           | 誰がどの行を書いたか    | `git blame ファイル名`                 |
| **ガベージコレクション（gc）**         | 不要履歴の整理       | `git gc --prune=now`              |

---

## 🧮 8. 実務でよく使うログと調査コマンド

| 目的              | コマンド                                   |
| --------------- | -------------------------------------- |
| 履歴をグラフ表示        | `git log --graph --oneline --decorate` |
| 変更した人・日付        | `git blame ファイル名`                      |
| 削除したコミットも含め全履歴  | `git reflog`                           |
| 特定の文字列検索        | `git log -S"関数名"`                      |
| ファイル削除の履歴も含めて探す | `git log --all -- ファイル名`               |

---

## 🌈 9. 応用Tips（チーム開発向け）

💡 **PR前に履歴をきれいに整える**

```bash
git rebase -i HEAD~5  # 直近5コミットを整理
```

💡 **緊急復旧**

```bash
git reflog             # 消したコミットの履歴確認
git checkout <commit-id> -b recovery
```

💡 **安全な取り消し**

```bash
git revert <commit-id> # 他人の履歴に影響なし
```

---

## 🧭 10. Gitフロー用語ざっくり図解

```
main（安定版） ← develop（開発版）
   ↑                 ↑
 release ← feature ← hotfix
```

| ブランチ名        | 用途         |
| ------------ | ---------- |
| **main**     | リリース済み安定版  |
| **develop**  | 開発中の最新コード  |
| **feature/** | 機能開発用      |
| **release/** | テスト・リリース準備 |
| **hotfix/**  | 緊急修正       |

---

## 🌸 終わりに

ここまで押さえると、Gitを「単なるコマンド操作」ではなく、
**履歴を自在に操る開発ツール**として使いこなせるようになります 💪

次は応用として、
✅ 「Gitコマンド結果の読み方チートシート」
✅ 「rebase・cherry-pick・stash 実演図解」
✅ 「チーム開発トラブル対応フロー図」

のどれをまとめましょうか？
希望のテーマを選んでもらえたら、そのままQiita記事風に仕上げます 🌿
